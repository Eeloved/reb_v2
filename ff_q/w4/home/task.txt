–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å: 

    –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç User.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ JSON —Å –ø–æ–º–æ—â—å—é json.Marshal.
    –í—ã–≤–µ–¥–∏ JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–π JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ User —Å –ø–æ–º–æ—â—å—é json.Unmarshal.
    –í—ã–≤–µ–¥–∏ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç.
     
JSON: {"name":"Alice","age":25}
–ò–º—è: Alice, –í–æ–∑—Ä–∞—Å—Ç: 25

–ó–∞–¥–∞–Ω–∏–µ 4: –°–æ—Ö—Ä–∞–Ω–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª 

–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å: 

    –°–æ–∑–¥–∞–π —Å—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: []User.
    –ò—Å–ø–æ–ª—å–∑—É–π json.Marshal —á—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ JSON.
    –°–æ—Ö—Ä–∞–Ω–∏ JSON –≤ —Ñ–∞–π–ª users.json —Å –ø–æ–º–æ—â—å—é os.WriteFile.
     

–ü—Ä–∏–º–µ—Ä: 
users := []User{
    {Name: "Alice", Age: 25},
    {Name: "Bob", Age: 30},
    {Name: "Eve", Age: 28},
}
 
–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: 0644 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ). 
     

 –ó–∞–¥–∞–Ω–∏–µ 5: –ü—Ä–æ—á–∏—Ç–∞–π JSON –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–µ–¥–∏ –∏–º–µ–Ω–∞ 

–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å: 

    –ü—Ä–æ—á–∏—Ç–∞–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ users.json —Å –ø–æ–º–æ—â—å—é os.ReadFile.
    –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–π JSON –≤ —Å—Ä–µ–∑ []User —á–µ—Ä–µ–∑ json.Unmarshal.
    –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
     

–ò–º–µ–Ω–∞: Alice, Bob, Eve


 –ó–∞–¥–∞–Ω–∏–µ 6 (–ë–æ–Ω—É—Å): –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 

–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é: 

go
func ParseAge(ageStr string) (int, error)
 
 

–ö–æ—Ç–æ—Ä–∞—è: 

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "25").
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ int —á–µ—Ä–µ–∑ strconv.Atoi.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —á–∏—Å–ª–æ).
     

–ü—Ä–∏–º–µ—Ä: 
age, err := ParseAge("abc")
if err != nil {
    fmt.Println("–û—à–∏–±–∫–∞:", err)
}


 –ó–∞–¥–∞–Ω–∏–µ 7 (–ë–æ–Ω—É—Å): –ü–æ–¥—Å—á—ë—Ç —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ 

    –°–æ–∑–¥–∞–π —Ñ–∞–π–ª text.txt —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞.
    –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:
        –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª.
        –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤.
        –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
         
     

    üí°  . 
     

 
üîπ –ó–∞–¥–∞–Ω–∏–µ 8 (–ë–æ–Ω—É—Å): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ JSON 

    –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É Config:
    
    type Config struct {
        Port    int    `json:"port"`
        Host    string `json:"host"`
        Debug   bool   `json:"debug"`
    }
     
     
    –°–æ–∑–¥–∞–π config.json —Å —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏.
    –ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Config.
    –í—ã–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è.
     

    –≠—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! 
     




     package main

import (
    "encoding/json"
    "log"
    "os"
)

type User struct {
    Name string `json:"name"`
    Age  int    `json:"age"`
}

func main() {
    users := []User{
        {Name: "Alice", Age: 25},
        {Name: "Bob", Age: 17},
    }

    // 1. –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
    data, err := json.Marshal(users)
    if err != nil {
        log.Fatal(err)
    }

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    err = os.WriteFile("users.json", data, 0644)
    if err != nil {
        log.Fatal(err)
    }

    // 3. –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    data, err = os.ReadFile("users.json")
    if err != nil {
        log.Fatal(err)
    }

    // 4. –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    var loadedUsers []User
    err = json.Unmarshal(data, &loadedUsers)
    if err != nil {
        log.Fatal(err)
    }

    // 5. –í—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–∞
    for _, u := range loadedUsers {
        if u.Age > 18 {
            log.Println("–í–∑—Ä–æ—Å–ª—ã–π:", u.Name)
        }
    }
}

